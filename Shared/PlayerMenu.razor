@using Jelly
@inject ConfigService Config
@inject MusicService Music

@if(Song != null)
{
    <div class="cover-container mt-4 mb-2"><a href="browse/album/@Song.AlbumID">
        <AsyncImage Class="cover" File="@Song.PictureFileName" />
    </a></div>

    <h4 class="text-center"><a href="browse/album/@Song.AlbumID">@Song.SongName</a></h4>
    <h5 class="text-center"><a href="browse/artist/@Song.ArtistID">@Song.ArtistName</a></h5>
}else
{
    <div class="cover-container mt-4 mb-2">
        <Image Class="cover"/>
    </div>

    <h4 class="text-center">Loading...</h4>
    <h5 class="text-center">Loading...</h5>
}

<Progress Class="mb-1" Height="10">
    <ProgressBar Width="@(Music.Streamer.Percentage)" style="background-color: var(--jam-primary)"/>
</Progress>

<Progress Class="mb-3" Height="3">
    <ProgressBar Width="@(((double) Music.Streamer.LoadedBytes / (double) Music.Downloader.FileSize) * 100)" style="background-color: var(--jam-text); transition:none;"/>
</Progress>

<div class="buttons mt-3">
    <div class="row">
        <div class="col-3"><Button @onclick="OnBack"><Icon Name="IconName.SkipBackwardFill"/></Button></div>
        <div class="col-3"><Button @onclick="OnAction"><Icon Name="@(Music.Streamer.IsPaused ? IconName.PlayFill : IconName.PauseFill)"/></Button></div>
        <div class="col-3"><Button @onclick="OnForward"><Icon Name="IconName.SkipForwardFill"/></Button></div>
        <div class="col-3"><Button @onclick="OnSpecial"><Icon Name="IconName.PlusCircleFill"/></Button></div>
    </div>
</div>

<br>
<p>Streaming : @Music.Streamer.IsStreaming</p>
<p>Paused : @Music.Streamer.IsPaused</p>
<p>Downloading : @Music.Downloader.IsDownloading</p>

<p>Loaded : @Music.Streamer.LoadedBytes</p>

<style>   
    a
    {
    color: var(--jam-header);
    }

    .buttons .btn
    {
    width: 100%;
    }
</style>

@code
{
    [Parameter]
    public SongEntity? Song { get; set; }

    [Parameter]
    public EventCallback OnForward { get; set; }

    [Parameter]
    public EventCallback OnBack { get; set; }

    [Parameter]
    public EventCallback OnAction { get; set; }

    [Parameter]
    public EventCallback OnSpecial { get; set; }

    protected override void OnInitialized()
    {
        Music.RefreshHook += Refresh;
        base.OnInitialized();
    }

    void Refresh()
    {
        StateHasChanged();
    }

    void Dispose()
    {
        Music.RefreshHook -= Refresh;
    }
}