@using Jelly
@inject ConfigService Config
@inject AudioService Audio

@if(Song != null)
{
    <div class="cover-container mt-4 mb-2">
        <Image Class="cover" Src="@Config.FullImageURL(Song.CoverFileName!)"/>
    </div>

    <h4 class="text-center"><a href="browse/album/@Song.AlbumID">@Song.SongName</a></h4>
    <h5 class="text-center"><a href="broswe/artist/@Song.ArtistID">@Song.ArtistName</a></h5>
}else
{
    <div class="cover-container mt-4 mb-2">
        <Image Class="cover"/>
    </div>

    <h4 class="text-center">Loading...</h4>
    <h5 class="text-center">Loading...</h5>
}

<Progress Class="mb-1" Height="10">
    <ProgressBar Width="25" style="background-color: var(--jam-primary)"/>
</Progress>

<Progress Class="mb-3" Height="3">
    <ProgressBar Width="@(((double) Audio.DownloadedBytes / (double) Audio.FileSize) * 100)" style="background-color: grey; transition:none;"/>
</Progress>

<div class="buttons mt-3">
    <div class="row">
        <div class="col-3"><Button @onclick="OnBack"><Icon Name="IconName.SkipBackward"/></Button></div>
        <div class="col-3"><Button @onclick="OnAction"><Icon Name="@(Audio.IsPaused ? IconName.Play : IconName.Pause)"/></Button></div>
        <div class="col-3"><Button @onclick="OnForward"><Icon Name="IconName.SkipForward"/></Button></div>
        <div class="col-3"><Button @onclick="OnSpecial"><Icon Name="IconName.PlusCircle"/></Button></div>
    </div>
</div>

<br>
<p>Paused : @Audio.IsPaused</p>
<p>Streaming : @(Audio.AudioSource != null)</p>
<p>Downloading : @Audio.IsDownloading</p>

<style>   
    a
    {
    color: var(--jam-header);
    }

    .cover-container 
    {
    position: relative;
    width: 100%;
    padding-bottom: 100%;
    overflow: hidden;
    border-radius: 25px;
    background-color: var(--jam-background);
    }

    .cover-container .cover
    {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;

    background-image: url("imgs/500.jpg");
    background-size: cover; 
    background-position: center;
    background-repeat: no-repeat;
    background-color: var(--jam-background);
    }

    .buttons .btn
    {
    width: 100%;
    }
</style>

@code
{
    [Parameter]
    public SongEntity? Song { get; set; }

    [Parameter]
    public EventCallback OnForward { get; set; }

    [Parameter]
    public EventCallback OnBack { get; set; }

    [Parameter]
    public EventCallback OnAction { get; set; }

    [Parameter]
    public EventCallback OnSpecial { get; set; }

    protected override void OnInitialized()
    {
        Audio.OnStateChanged += Refresh;
        base.OnInitialized();
    }

    void Refresh()
    {
        StateHasChanged();
    }

    void Dispose()
    {
        Audio.OnStateChanged -= Refresh;
    }
}